// Code generated by mockery v2.30.16. DO NOT EDIT.

package maincomponent_mocks

import (
	bytes "bytes"

	mock "github.com/stretchr/testify/mock"

	rand "math/rand"
)

// MainComponent is an autogenerated mock type for the MainComponent type
type MainComponent struct {
	mock.Mock
}

type MainComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MainComponent) EXPECT() *MainComponent_Expecter {
	return &MainComponent_Expecter{mock: &_m.Mock}
}

// Chance provides a mock function with given fields: s
func (_m *MainComponent) Chance(s rand.Source) bool {
	ret := _m.Called(s)

	var r0 bool
	if rf, ok := ret.Get(0).(func(rand.Source) bool); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MainComponent_Chance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chance'
type MainComponent_Chance_Call struct {
	*mock.Call
}

// Chance is a helper method to define mock.On call
//   - s rand.Source
func (_e *MainComponent_Expecter) Chance(s interface{}) *MainComponent_Chance_Call {
	return &MainComponent_Chance_Call{Call: _e.mock.On("Chance", s)}
}

func (_c *MainComponent_Chance_Call) Run(run func(s rand.Source)) *MainComponent_Chance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(rand.Source))
	})
	return _c
}

func (_c *MainComponent_Chance_Call) Return(_a0 bool) *MainComponent_Chance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MainComponent_Chance_Call) RunAndReturn(run func(rand.Source) bool) *MainComponent_Chance_Call {
	_c.Call.Return(run)
	return _c
}

// OtherFunction provides a mock function with given fields:
func (_m *MainComponent) OtherFunction() bytes.Buffer {
	ret := _m.Called()

	var r0 bytes.Buffer
	if rf, ok := ret.Get(0).(func() bytes.Buffer); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bytes.Buffer)
	}

	return r0
}

// MainComponent_OtherFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OtherFunction'
type MainComponent_OtherFunction_Call struct {
	*mock.Call
}

// OtherFunction is a helper method to define mock.On call
func (_e *MainComponent_Expecter) OtherFunction() *MainComponent_OtherFunction_Call {
	return &MainComponent_OtherFunction_Call{Call: _e.mock.On("OtherFunction")}
}

func (_c *MainComponent_OtherFunction_Call) Run(run func()) *MainComponent_OtherFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MainComponent_OtherFunction_Call) Return(_a0 bytes.Buffer) *MainComponent_OtherFunction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MainComponent_OtherFunction_Call) RunAndReturn(run func() bytes.Buffer) *MainComponent_OtherFunction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMainComponent creates a new instance of MainComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMainComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MainComponent {
	mock := &MainComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code below was generated by components. DO NOT EDIT.
// Component version: v0.1.0

type MainComponent_ExpecterChain[T any] func(*T) *MainComponent_Expecter

func ExpecterChain[T any](fetch func(*T) *MainComponent) MainComponent_ExpecterChain[T] {
	return func(m *T) *MainComponent_Expecter {
		c := fetch(m)
		return c.EXPECT()
	}
}

type MainComponent_ChanceChain[T any] func(*T) *MainComponent_Chance_Call

func (c MainComponent_ExpecterChain[T]) Chance(s interface{}) MainComponent_ChanceChain[T] {
	return func(m *T) *MainComponent_Chance_Call {
		expecter := c(m)
		return expecter.Chance(s)
	}
}

func (c MainComponent_ChanceChain[T]) Run(run func(s rand.Source)) MainComponent_ChanceChain[T] {
	return func(m *T) *MainComponent_Chance_Call {
		call := c(m)
		return call.Run(run)
	}
}

func (c MainComponent_ChanceChain[T]) Return(_a0 bool) MainComponent_ChanceChain[T] {
	return func(m *T) *MainComponent_Chance_Call {
		call := c(m)
		return call.Return(_a0)
	}
}

func (c MainComponent_ChanceChain[T]) RunAndReturn(run func(s rand.Source) bool) MainComponent_ChanceChain[T] {
	return func(m *T) *MainComponent_Chance_Call {
		call := c(m)
		return call.RunAndReturn(run)
	}
}

type MainComponent_OtherFunctionChain[T any] func(*T) *MainComponent_OtherFunction_Call

func (c MainComponent_ExpecterChain[T]) OtherFunction() MainComponent_OtherFunctionChain[T] {
	return func(m *T) *MainComponent_OtherFunction_Call {
		expecter := c(m)
		return expecter.OtherFunction()
	}
}

func (c MainComponent_OtherFunctionChain[T]) Run(run func()) MainComponent_OtherFunctionChain[T] {
	return func(m *T) *MainComponent_OtherFunction_Call {
		call := c(m)
		return call.Run(run)
	}
}

func (c MainComponent_OtherFunctionChain[T]) Return(_a0 bytes.Buffer) MainComponent_OtherFunctionChain[T] {
	return func(m *T) *MainComponent_OtherFunction_Call {
		call := c(m)
		return call.Return(_a0)
	}
}

func (c MainComponent_OtherFunctionChain[T]) RunAndReturn(run func() bytes.Buffer) MainComponent_OtherFunctionChain[T] {
	return func(m *T) *MainComponent_OtherFunction_Call {
		call := c(m)
		return call.RunAndReturn(run)
	}
}

// Code generated by mockery v2.30.16. DO NOT EDIT.

package subcomponent_mocks

import (
	rand "math/rand"

	mock "github.com/stretchr/testify/mock"
)

// SubComponent is an autogenerated mock type for the SubComponent type
type SubComponent struct {
	mock.Mock
}

type SubComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *SubComponent) EXPECT() *SubComponent_Expecter {
	return &SubComponent_Expecter{mock: &_m.Mock}
}

// Chance provides a mock function with given fields: s
func (_m *SubComponent) Chance(s rand.Source) bool {
	ret := _m.Called(s)

	var r0 bool
	if rf, ok := ret.Get(0).(func(rand.Source) bool); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SubComponent_Chance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chance'
type SubComponent_Chance_Call struct {
	*mock.Call
}

// Chance is a helper method to define mock.On call
//   - s rand.Source
func (_e *SubComponent_Expecter) Chance(s interface{}) *SubComponent_Chance_Call {
	return &SubComponent_Chance_Call{Call: _e.mock.On("Chance", s)}
}

func (_c *SubComponent_Chance_Call) Run(run func(s rand.Source)) *SubComponent_Chance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(rand.Source))
	})
	return _c
}

func (_c *SubComponent_Chance_Call) Return(_a0 bool) *SubComponent_Chance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SubComponent_Chance_Call) RunAndReturn(run func(rand.Source) bool) *SubComponent_Chance_Call {
	_c.Call.Return(run)
	return _c
}

// NewSubComponent creates a new instance of SubComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubComponent {
	mock := &SubComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code below was generated by components. DO NOT EDIT.
// Component version: v0.1.0

type SubComponent_ExpecterChain[T any] func(*T) *SubComponent_Expecter

func ExpecterChain[T any](fetch func(*T) *SubComponent) SubComponent_ExpecterChain[T] {
	return func(m *T) *SubComponent_Expecter {
		c := fetch(m)
		return c.EXPECT()
	}
}

type SubComponent_ChanceChain[T any] func(*T) *SubComponent_Chance_Call

func (c SubComponent_ExpecterChain[T]) Chance(s interface{}) SubComponent_ChanceChain[T] {
	return func(m *T) *SubComponent_Chance_Call {
		expecter := c(m)
		return expecter.Chance(s)
	}
}

func (c SubComponent_ChanceChain[T]) Run(run func(s rand.Source)) SubComponent_ChanceChain[T] {
	return func(m *T) *SubComponent_Chance_Call {
		call := c(m)
		return call.Run(run)
	}
}

func (c SubComponent_ChanceChain[T]) Return(_a0 bool) SubComponent_ChanceChain[T] {
	return func(m *T) *SubComponent_Chance_Call {
		call := c(m)
		return call.Return(_a0)
	}
}

func (c SubComponent_ChanceChain[T]) RunAndReturn(run func(s rand.Source) bool) SubComponent_ChanceChain[T] {
	return func(m *T) *SubComponent_Chance_Call {
		call := c(m)
		return call.RunAndReturn(run)
	}
}

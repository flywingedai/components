package tests

import (
	"reflect"
)

var DefaultMockPriority = -2

/*
Function to automatically handle a mock chain. Use the autogenerated functions
from the components command places at the bottom of your component definition
file, prefixed with "mock_" to use this.

ex. mock_component().METHOD(args...).Return(response...) (or similar)

Default Priority = -2
*/
func (to *TestOptions[C, M, D]) Mock(
	f interface{},
) *TestOptions[C, M, D] {
	return to.copyAndAppend(DefaultMockPriority, func(state *TestState[C, M, D]) {

		/*
			TODO: No errors possible if the user only passes in the correct
			function via the generated mock_* functions. If not...
		*/
		function := reflect.ValueOf(f)

		if function.Kind() != reflect.Func {
			panic("invalid type " + function.Kind().String() + " passed to Mock()")
		}

		function.Call([]reflect.Value{reflect.ValueOf(state.Mocks)})
	})
}
